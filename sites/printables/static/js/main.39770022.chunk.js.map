{"version":3,"sources":["pages/calendar/CalendarPage.tsx","components/Hero.tsx","pages/main/MainPage.tsx","components/BaseStyle.tsx","components/PrintablesAppBar.tsx","components/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["CalendarPage","Button","type","heroStyles","makeStyles","theme","heroContent","backgroundColor","palette","grey","padding","spacing","textAlign","Hero","properties","title","subtitle","children","classes","className","Container","maxWidth","component","Typography","variant","align","color","gutterBottom","paragraph","MainPage","List","ListItem","ListItemText","secondary","to","BaseStyle","CssBaseline","styles","wrap","minHeight","PrintablesAppBar","AppBar","Toolbar","IconButton","edge","App","basename","process","exact","path","Boolean","window","location","hostname","test","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","querySelector","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mLAUeA,EAPM,kBACnB,qCACE,0CACA,cAACC,EAAA,EAAD,CAAQC,KAAK,SAAb,mC,gDCFEC,EAAaC,aAAW,SAACC,GAAD,MAAY,CACxCC,YAAa,CACXC,gBAAiBF,EAAMG,QAAQC,KAAK,KACpCC,QAASL,EAAMM,QAAQ,EAAG,EAAG,GAC7BC,UAAW,cA+BAC,EArBF,SAACC,GACZ,IAAQC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SACnBC,EAAUf,IAChB,OAEE,qBAAKgB,UAAWD,EAAQZ,YAAxB,SACE,eAACc,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAU,UAAU,aAAW,OAAxD,UACE,cAACC,EAAA,EAAD,CAAYD,UAAU,KAAKE,QAAQ,KAAKC,MAAM,SAASC,MAAM,cAAcC,cAAY,EAAvF,SACGZ,IAEFC,GACC,cAACO,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,SAASC,MAAM,gBAAgBE,WAAS,EAAvE,SACGZ,IAGHC,QCXKY,EAfE,kBACf,qCACE,cAAC,EAAD,CAAMd,MAAM,aAAaC,SAAS,sCAClC,cAACI,EAAA,EAAD,UACE,cAACU,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAcC,UAAU,8CAAxB,SACE,cAAC,IAAD,CAAMC,GAAG,YAAT,kC,QCPGC,EAJG,kBAChB,cAACC,EAAA,EAAD,K,yCCGIC,EAASjC,aAAW,iBAAO,CAC/BkC,KAAM,CACJC,UAAW,QAoBAC,EAhBU,WACvB,IAAMtB,EAAUmB,IAChB,OACE,qBAAKlB,UAAWD,EAAQoB,KAAxB,SACE,cAACG,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,KAAK,QAAQlB,MAAM,UAAU,aAAW,OAApD,SACE,cAAC,IAAD,MAEF,cAACH,EAAA,EAAD,CAAYC,QAAQ,KAApB,gCCEKqB,MAff,WACE,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,+BACE,eAAC,IAAD,CAAQC,SARCC,oBAQT,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAI3B,UAAWO,IACjC,cAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,YAAY3B,UAAWtB,aCH/BkD,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAGhB,yDAAyDC,KAAKH,OAAOC,SAASC,WClBrF,IAeeE,EAfS,SAACC,GACnBA,GAAeA,aAAuBC,UAEnC,6BAAqBC,MAAK,YAExB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCNdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,UF6HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACAA,EAAaC,gBAEnBC,OAAM,SAACC,GAENC,QAAQD,MAAMA,EAAME,YEzH5BtB,M","file":"static/js/main.39770022.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core';\n\nconst CalendarPage = (): JSX.Element => (\n  <>\n    <h1>Calendar</h1>\n    <Button type=\"button\">Generate Calendar</Button>\n  </>\n);\n\nexport default CalendarPage;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container, Typography } from '@material-ui/core';\n\nconst heroStyles = makeStyles((theme) => ({\n  heroContent: {\n    backgroundColor: theme.palette.grey[200],\n    padding: theme.spacing(8, 0, 6),\n    textAlign: 'center',\n  },\n}));\n\ninterface HeroProperties {\n  title: string,\n  subtitle: string,\n  children?: JSX.Element,\n}\n\nconst Hero = (properties: HeroProperties): JSX.Element => {\n  const { title, subtitle, children } = properties;\n  const classes = heroStyles();\n  return (\n\n    <div className={classes.heroContent}>\n      <Container maxWidth=\"sm\" component=\"section\" aria-label=\"Hero\">\n        <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n          {title}\n        </Typography>\n        {subtitle && (\n          <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n            {subtitle}\n          </Typography>\n        )}\n        { children }\n      </Container>\n    </div>\n  );\n};\n\nexport default Hero;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  List, ListItem, ListItemText, Container,\n} from '@material-ui/core';\nimport Hero from '../../components/Hero';\n\nconst MainPage = (): JSX.Element => (\n  <>\n    <Hero title=\"Printables\" subtitle=\"Printable materials for Education\" />\n    <Container>\n      <List>\n        <ListItem>\n          <ListItemText secondary=\"Generate a printable calendar for the month\">\n            <Link to=\"/calendar\">Calendar</Link>\n          </ListItemText>\n        </ListItem>\n      </List>\n    </Container>\n  </>\n);\n\nexport default MainPage;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nconst BaseStyle = (): JSX.Element => (\n  <CssBaseline />\n);\n\nexport default BaseStyle;\n","import React from 'react';\nimport {\n  AppBar, IconButton, Toolbar, Typography,\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst styles = makeStyles(() => ({\n  wrap: {\n    minHeight: 64,\n  },\n}));\n\nconst PrintablesAppBar = (): JSX.Element => {\n  const classes = styles();\n  return (\n    <div className={classes.wrap}>\n      <AppBar>\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Printables</Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default PrintablesAppBar;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport CalendarPage from '../pages/calendar/CalendarPage';\nimport MainPage from '../pages/main/MainPage';\nimport BaseStyle from './BaseStyle';\nimport PrintablesAppBar from './PrintablesAppBar';\n\nconst basePath = process.env.PUBLIC_URL;\n\nfunction App(): JSX.Element {\n  return (\n    <>\n      <BaseStyle />\n      <PrintablesAppBar />\n      <main>\n        <Router basename={basePath}>\n          <Route exact path=\"/\" component={MainPage} />\n          <Route exact path=\"/calendar\" component={CalendarPage} />\n        </Router>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","/* eslint-disable promise/always-return */\n/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    // eslint-disable-next-line unicorn/better-regex\n    || /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/.test(window.location.hostname),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (!installingWorker) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://cra.link/PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType && !contentType.includes('javascript'))\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        // eslint-disable-next-line promise/no-nesting\n        void navigator.serviceWorker.ready\n          .then((registration) => registration.unregister())\n          .then(() => window.location.reload());\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        void navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        void registration.unregister();\n      })\n      .catch((error) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    // eslint-disable-next-line promise/always-return\n    void import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}